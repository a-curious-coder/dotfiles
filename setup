#!/usr/bin/env bash

# Dotfiles Installer
# ==================
# Single entry point for all installation modes

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$SCRIPT_DIR"

# Default settings
MODE="auto"              # auto, dotfiles, packages, full
INTERACTIVE=false        # Interactive package selection
DRY_RUN=false           # Show what would be done
CATEGORIES=""           # Specific categories to install

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Logging functions
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
header() { echo -e "${CYAN}=== $1 ===${NC}"; }

# Show usage information
show_usage() {
    cat << EOF
Dotfiles Installer - Single entry point for all installation modes

USAGE:
    $0 [OPTIONS]

OPTIONS:
    -h, --help              Show this help message
    -m, --mode MODE         Installation mode: auto, dotfiles, packages, full
    -i, --interactive       Interactive package selection
    -c, --categories LIST   Install specific categories (comma-separated)
    -d, --dry-run          Show what would be done without executing
    -f, --force            Force reinstallation of existing packages

MODES:
    auto        Detect and install what's needed (default)
    dotfiles    Only setup dotfiles (stow symlinks)
    packages    Only install packages
    full        Complete installation (packages + dotfiles)

CATEGORIES:
    development, cli, security, language, terminal

EXAMPLES:
    $0                                    # Auto-detect and install
    $0 --mode dotfiles                   # Only setup dotfiles
    $0 --mode packages --interactive     # Interactive package selection
    $0 --categories cli,development      # Install specific categories
    $0 --dry-run                         # Preview what would be done
EOF
}

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -m|--mode)
                MODE="$2"
                shift 2
                ;;
            -i|--interactive)
                INTERACTIVE=true
                shift
                ;;
            -c|--categories)
                CATEGORIES="$2"
                shift 2
                ;;
            -d|--dry-run)
                DRY_RUN=true
                shift
                ;;
            -f|--force)
                FORCE_REINSTALL=true
                shift
                ;;
            *)
                error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
}

# Detect platform
detect_platform() {
    case "$(uname -s)" in
        Linux*)  echo "linux" ;;
        Darwin*) echo "macos" ;;
        *)       echo "unknown" ;;
    esac
}

# Check if required tools are available
check_requirements() {
    local platform="$(detect_platform)"
    local missing_tools=()
    
    # Check for basic tools
    command -v curl >/dev/null || missing_tools+=("curl")
    command -v git >/dev/null || missing_tools+=("git")
    
    # Platform-specific checks
    case "$platform" in
        linux)
            command -v apt >/dev/null || missing_tools+=("apt")
            ;;
        macos)
            if ! command -v brew >/dev/null; then
                info "Installing Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                eval "$(/opt/homebrew/bin/brew shellenv)" 2>/dev/null || eval "$(/usr/local/bin/brew shellenv)"
            fi
            ;;
    esac
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        error "Missing required tools: ${missing_tools[*]}"
        exit 1
    fi
}

# Install packages using the unified configuration
install_packages() {
    local platform="$(detect_platform)"
    local config_file="${DOTFILES_DIR}/packages.yaml"
    
    # Source package installation library
    source "${DOTFILES_DIR}/scripts/lib/package-manager.sh"
    
    # Install yq if needed
    if ! command -v yq &>/dev/null; then
        info "Installing yq for YAML parsing..."
        case "$platform" in
            linux)
                sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
                sudo chmod +x /usr/local/bin/yq
                ;;
            macos)
                if command -v brew &>/dev/null; then
                    brew install yq
                else
                    error "Homebrew required for yq installation on macOS"
                    return 1
                fi
                ;;
        esac
    fi
    
    # Get package list
    local packages
    if [[ -n "$CATEGORIES" ]]; then
        # Install specific categories
        packages=$(yq eval '.packages | to_entries | map(select(.value.category as $cat | ("'"$CATEGORIES"'") | split(",") | map(. == $cat) | any)) | map(.key) | .[]' "$config_file")
    else
        # Install default categories
        packages=$(yq eval '.packages | to_entries | map(select((.value.category as $cat | .key as $key | (.value.default // (.value.category | . == "development" or . == "cli" or . == "terminal")))) | map(.key) | .[]' "$config_file")
    fi
    
    # Install each package
    while IFS= read -r package; do
        [[ -z "$package" ]] && continue
        
        local package_config=$(yq eval ".packages.${package}" "$config_file")
        if [[ "$package_config" != "null" ]]; then
            install_package "$package" "$package_config"
        fi
    done <<< "$packages"
}

# Run the appropriate installation script
run_installation() {
    local platform="$(detect_platform)"
    
    case "$MODE" in
        dotfiles)
            header "Setting up dotfiles"
            if [[ "$DRY_RUN" == "true" ]]; then
                info "Would setup dotfiles with stow"
                info "Directories to stow: zsh git ghostty nvim tmux vscode"
            else
                "${DOTFILES_DIR}/scripts/setup-dotfiles.sh"
            fi
            ;;
        packages)
            header "Installing packages"
            if [[ "$DRY_RUN" == "true" ]]; then
                info "Would install packages for platform: $platform"
                if [[ -n "$CATEGORIES" ]]; then
                    info "Categories: $CATEGORIES"
                fi
                # Show what would be installed
                local config_file="${DOTFILES_DIR}/packages.yaml"
                if [[ -f "$config_file" ]]; then
                    local packages
                    if [[ -n "$CATEGORIES" ]]; then
                        packages=$(yq eval '.packages | to_entries | map(select(.value.category as $cat | ("'"$CATEGORIES"'") | split(",") | map(. == $cat) | any)) | map(.key) | .[]' "$config_file" 2>/dev/null || echo "")
                    else
                        packages=$(yq eval '.packages | to_entries | map(select(.value.default // (.value.category | . == "development" or . == "cli" or . == "terminal"))) | map(.key) | .[]' "$config_file" 2>/dev/null || echo "")
                    fi
                    info "Packages to install: $(echo "$packages" | tr '\n' ' ')"
                fi
            else
                install_packages
            fi
            ;;
        full)
            header "Full installation"
            run_installation_mode "packages"
            run_installation_mode "dotfiles"
            if [[ -f "${DOTFILES_DIR}/scripts/post-install.sh" ]]; then
                "${DOTFILES_DIR}/scripts/post-install.sh"
            fi
            ;;
        auto)
            header "Auto-detecting installation needs"
            # Check if dotfiles are already linked
            if [[ -L "$HOME/.zshrc" ]] && [[ -L "$HOME/.tmux.conf" ]]; then
                info "Dotfiles appear to be already setup"
            else
                MODE="full"
                run_installation
                return
            fi
            
            # Check if packages need installation
            local packages_needed=false
            if ! command -v docker >/dev/null || ! command -v code >/dev/null; then
                packages_needed=true
            fi
            
            if [[ "$packages_needed" == "true" ]]; then
                MODE="packages"
                run_installation
            else
                success "System appears to be fully configured"
            fi
            ;;
    esac
}

# Helper function to run installation mode recursively
run_installation_mode() {
    local old_mode="$MODE"
    MODE="$1"
    run_installation
    MODE="$old_mode"
}

# Show welcome message
show_welcome() {
    echo -e "${CYAN}"
    cat << "EOF"
╔══════════════════════════════════════════════════╗
║                  🏠 Dotfiles                     ║
║                                                  ║
║     Professional Development Environment        ║
║                                                  ║
║  • GNU Stow for symlink management             ║
║  • Cross-platform (Linux/macOS)                ║
║  • Modern CLI tools & configurations           ║
║  • Security/CTF tools                          ║
╚══════════════════════════════════════════════════╝
EOF
    echo -e "${NC}"
    echo
}

# Main function
main() {
    show_welcome
    parse_arguments "$@"
    
    info "Platform: $(detect_platform)"
    info "Mode: $MODE"
    [[ "$INTERACTIVE" == "true" ]] && info "Interactive mode enabled"
    [[ "$DRY_RUN" == "true" ]] && info "Dry run mode - no changes will be made"
    echo
    
    check_requirements
    run_installation
    
    echo
    success "Installation completed successfully!"
    info "Run 'source ~/.zshrc' to reload your shell configuration"
}

# Run main function
main "$@"
