# Useful Zsh Functions
# ====================

# Extract various archive formats
extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Find process by name
psgrep() {
    ps aux | grep -v grep | grep "$@" -i --color=auto;
}

# Kill process by name
killnamed() {
    ps aux | grep -v grep | grep "$@" -i --color=auto;
    echo ""
    echo "Type PID to kill:"
    read -r pid
    kill ${pid}
}

# Git clone and cd into directory
gclone() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Quick backup of a file
backup() {
    cp "$1"{,.bak-$(date +%Y%m%d-%H%M%S)}
}

# Weather function with location
weather() {
    if [ $# -eq 0 ]; then
        curl -s "wttr.in?format=3"
    else
        curl -s "wttr.in/$1?format=3"
    fi
}

# Docker cleanup
docker-cleanup() {
    echo "Cleaning up Docker..."
    docker system prune -f
    docker volume prune -f
    docker image prune -a -f
    echo "Docker cleanup complete!"
}

# Create a new development project
newproject() {
    if [ $# -eq 0 ]; then
        echo "Usage: newproject <project-name>"
        return 1
    fi

    local project_name="$1"
    local project_dir="$HOME/dev/$project_name"

    mkdir -p "$project_dir"
    cd "$project_dir"

    # Initialize git repo
    git init

    # Create basic files
    touch README.md
    echo "# $project_name" > README.md
    echo "node_modules/\n.env\n*.log" > .gitignore

    echo "Project '$project_name' created at $project_dir"
}

# Search and replace in files
replace-in-files() {
    if [ $# -ne 3 ]; then
        echo "Usage: replace-in-files <search> <replace> <file-pattern>"
        return 1
    fi

    grep -rl "$1" $3 | xargs sed -i "s/$1/$2/g"
}

# Port management
port() {
    if [ $# -eq 0 ]; then
        echo "Usage: port <port-number>"
        return 1
    fi

    lsof -i :$1
}

killport() {
    if [ $# -eq 0 ]; then
        echo "Usage: killport <port-number>"
        return 1
    fi

    lsof -ti:$1 | xargs kill -9
}

# Update all the things
update-all() {
    echo "ðŸ”„ Updating system packages..."
    sudo apt update && sudo apt upgrade -y

    echo "ðŸ”„ Updating Oh My Zsh..."
    omz update

    echo "ðŸ”„ Updating Rust..."
    rustup update

    echo "ðŸ”„ Updating Node.js packages..."
    if command -v npm &> /dev/null; then
        npm update -g
    fi

    echo "âœ… All updates complete!"
}
