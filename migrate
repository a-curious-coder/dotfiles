#!/usr/bin/env bash

# Dotfiles Migration Script
# =========================
# Migrate from old structure to new unified approach

set -euo pipefail

DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Files to remove (redundant/deprecated)
remove_redundant_files() {
    local files_to_remove=(
        "config.yaml"
        "config-macos.yaml"
        "tool-selection.yaml"
        "install.sh"
        "install-cross-platform.sh"
        "install-interactive.sh"
        "validate-macos-support.sh"
    )
    
    info "Removing redundant configuration files..."
    
    for file in "${files_to_remove[@]}"; do
        if [[ -f "$DOTFILES_DIR/$file" ]]; then
            warning "Removing: $file"
            git mv "$DOTFILES_DIR/$file" "$DOTFILES_DIR/.archive/" 2>/dev/null || mv "$DOTFILES_DIR/$file" "$DOTFILES_DIR/.archive/"
        fi
    done
}

# Create archive directory for old files
create_archive() {
    if [[ ! -d "$DOTFILES_DIR/.archive" ]]; then
        mkdir -p "$DOTFILES_DIR/.archive"
        echo "# Archived Files" > "$DOTFILES_DIR/.archive/README.md"
        echo "These files have been replaced by the new unified configuration system." >> "$DOTFILES_DIR/.archive/README.md"
    fi
}

# Update README with new usage instructions
update_readme() {
    cat > "$DOTFILES_DIR/README.md" << 'EOF'
# 🏠 Dotfiles

Modern, cross-platform dotfiles with GNU Stow and unified package management.

## ✨ Features

- **Cross-platform**: Works on Linux and macOS
- **GNU Stow**: Clean symlink management
- **Unified config**: Single source of truth for packages
- **Interactive**: Choose what to install
- **Modular**: Install by category or individual tools

## 🚀 Quick Start

```bash
# Clone the repository
git clone https://github.com/your-username/dotfiles.git ~/.dotfiles
cd ~/.dotfiles

# Run the installer
./setup

# Or with options
./setup --interactive                    # Choose packages interactively
./setup --mode dotfiles                 # Only setup dotfiles
./setup --categories cli,development    # Install specific categories
./setup --dry-run                       # Preview what would be done
```

## 📁 Structure

```
.dotfiles/
├── setup                    # Main installer script
├── packages.yaml           # Unified package configuration
├── ghostty/                # Ghostty terminal config
├── git/                    # Git configuration
├── nvim/                   # Neovim configuration  
├── tmux/                   # Tmux configuration
├── vscode/                 # VS Code settings
├── zsh/                    # Zsh and Oh My Zsh config
└── scripts/                # Installation scripts
    ├── lib/                # Shared libraries
    └── ...
```

## 🛠 Configuration

### Package Categories

- **development**: Core development tools (Docker, VS Code, Git)
- **cli**: Modern CLI tools (bat, ripgrep, fd, fzf)
- **security**: Security and CTF tools (nmap, wireshark, etc.)
- **language**: Programming languages (Node.js, Go, Rust)
- **terminal**: Terminal applications (Ghostty, tmux)

### Customization

Edit `packages.yaml` to:
- Add new packages
- Modify installation methods
- Set platform-specific configurations
- Define post-install commands

## 📝 Usage Examples

```bash
# Full installation
./setup --mode full

# Just dotfiles (no packages)
./setup --mode dotfiles

# Interactive package selection
./setup --interactive

# Install specific categories
./setup --categories development,cli

# Preview changes
./setup --dry-run
```

## 🔧 Manual Operations

```bash
# Setup dotfiles only
stow ghostty git nvim tmux vscode zsh

# Remove dotfiles
stow -D ghostty git nvim tmux vscode zsh

# Update packages
./setup --mode packages --force
```

## 🐛 Troubleshooting

- Run `./setup --dry-run` to see what would be installed
- Check logs in the terminal for specific error messages
- Ensure you have `curl`, `git`, and platform package manager installed

## 📄 License

MIT License - see LICENSE file for details.
EOF

    success "Updated README.md with new usage instructions"
}

# Main migration function
main() {
    info "Starting dotfiles migration to unified structure..."
    
    create_archive
    remove_redundant_files
    update_readme
    
    success "Migration completed!"
    echo
    info "New usage:"
    echo "  ./setup                    # Auto-detect and install"
    echo "  ./setup --interactive      # Interactive package selection"
    echo "  ./setup --mode dotfiles    # Only setup dotfiles"
    echo
    warning "Old files moved to .archive/ directory"
    info "You can safely remove .archive/ after testing the new system"
}

main "$@"
